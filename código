
using { /Fortnite.com/Devices }
using {/Fortnite.com/Characters}
using { /Verse.org/Simulation }
using { /UnrealEngine.com/Temporary/Diagnostics }
using { /UnrealEngine.com/Temporary/SpatialMath }

# VEJA https://dev.epicgames.com/documentation/en-us/uefn/create-your-own-device-in-verse para saber como criar um dispositivo de verse

# Um dispositivo criativo do Verse que pode ser colocado em um nível
flakes_anda := class(creative_device):

    # É executado quando o dispositivo é iniciado em um jogo em execução
    @editable var Monstro : creative_prop = creative_prop{}
    @editable var ZonaDoMonstro : mutator_zone_device = mutator_zone_device{}
    @editable var Jumpscare : cinematic_sequence_device = cinematic_sequence_device{}
    @editable var Audio : audio_player_device = audio_player_device{}

    var MonsterSpottedPlayer : logic = false


    OnBegin<override>()<suspends>:void=
        ZonaDoMonstro.AgentEntersEvent.Subscribe(OnPlayerSpotted)
        Players := GetPlayspace().GetPlayers()
            if (Player := Players[0], Agent := agent[Player]):
                Audio.Register(Agent)


    OnPlayerSpotted(Agent : agent):void=
        if (MonsterSpottedPlayer = true):
            Monstro.Dispose()
            Jumpscare.Play()

        else:
            Players := GetPlayspace().GetPlayers()
            if (Player := Players[0]):
                spawn:
                    FirstEncounterCooldown()
                spawn:
                    FollowPlayer(Monstro, Player)
                

    FirstEncounterCooldown()<suspends>:void=
        Sleep(2.0)
        set MonsterSpottedPlayer = true

    FollowPlayer(Enemy : creative_prop, Player : player)<suspends>:void=
        var PreviousTime : float = GetSimulationElapsedTime()
            MoveSpeed := 0.3
            loop:
                Sleep(0.0)
                CurrentTime := GetSimulationElapsedTime()
                DeltaTime := CurrentTime - PreviousTime
                set PreviousTime = CurrentTime
                if (PlayerCharacter := Player.GetFortCharacter[], Enemy.IsValid[]):
    
                    PropLocation := Enemy.GetTransform().Translation
                    PlayerLocation := PlayerCharacter.GetTransform().Translation
    
                    if (LookDirection := (PlayerLocation - PropLocation).MakeUnitVector[]):
    
                        Yaw := RadiansToDegrees(ArcTan(LookDirection.Y, LookDirection.X)) - 90.0
                        Pitch := 0.0 #RadiansToDegrees(ArcTan(LookDirection.Z, Sqrt((LookDirection.X * LookDirection.X) + (LookDirection.Y * LookDirection.Y))))
                        Roll := 0.0
    
                        NewRotation := MakeRotationFromYawPitchRollDegrees(Yaw, Pitch, Roll)
    
                        # Movement
                        LerpLocation := Lerp(PropLocation, PlayerLocation, DeltaTime * MoveSpeed)
                        FinalLocation := vector3{X := LerpLocation.X, Y := LerpLocation.Y, Z := 0.0}
    
                        if:
                            Enemy.TeleportTo[FinalLocation, NewRotation]
         
